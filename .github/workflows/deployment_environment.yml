# This is a basic workflow to help you get started with Actions

name: data-strategy-environment

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    secrets:
      TENANT_ID:
        required: true
      SUBSCRIPTION_ID:
        required: true
      SERVICE_PRINCIPAL_CLIENT_ID:
        required: true
      VM_USERNAME:
        required: false
      VM_PASSWORD:
        required: false
      DNS_ZONE_SUBSCRIPTION_ID:
        required: false
    inputs:
      environment:
        required: true
        type: string
      envFolderPath:
        required: true
        type: string
        
permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
          
  create-env-azure-resources:

    outputs:
      DeployDataScienceToolkit: ${{ env.DeployDataScienceToolkit }}

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    environment: 
      name: ${{ inputs.environment }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Log into Azure
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Get Main Variables
        run: |
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/general_feature_flags/feature_flags_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/general_variables/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/networking_setup/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/entra_assignments/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
        shell: pwsh

      # Create resource group for environment resources and get service principal name
      - name: Set Env Variables Needed For Downstream Actions
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $spDetails = az ad sp show --id "${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}" | ConvertFrom-Json  

            # Service Principal Name
            $servicePrincipalName = $spDetails.appDisplayName
            Write-Output "::add-mask::$servicePrincipalName"
            "servicePrincipalName=$servicePrincipalName" >> $env:GITHUB_ENV

            # Service Principal AAD Identity ID
            $servicePrincipalObjectId = $spDetails.id
            Write-Output "::add-mask::$servicePrincipalObjectId"
            "servicePrincipalObjectId=$servicePrincipalObjectId" >> $env:GITHUB_ENV

            # Tags with Single Quotes For Bicep Templates
            $tags_single_quote = '${{ env.tags }}' -replace '"', "'"
            "tags_single_quote=$tags_single_quote" >> $env:GITHUB_ENV


            if ( '${{ env.Entra_Groups_Data_Publishers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Publishers = '['+ '${{ env.Entra_Groups_Data_Publishers }}' + ']'
              "Entra_Groups_Data_Publishers=$Entra_Groups_Data_Publishers" >> $env:GITHUB_ENV
            }

            if ( '${{ env.Entra_Groups_Data_Producers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Producers = '['+ '${{ env.Entra_Groups_Data_Producers }}' + ']'
              "Entra_Groups_Data_Producers=$Entra_Groups_Data_Producers" >> $env:GITHUB_ENV
            }

            if ( '${{ env.Entra_Groups_Data_Consumers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Consumers = '['+ '${{ env.Entra_Groups_Data_Consumers }}' + ']'
              "Entra_Groups_Data_Consumers=$Entra_Groups_Data_Consumers" >> $env:GITHUB_ENV
            }

            $Entra_Group_Admin_HashTable = '${{ env.Entra_Group_Admin }}' | ConvertFrom-Json
            $Entra_Group_Admin_ID = $Entra_Group_Admin_HashTable.Group_ID
            "Entra_Group_Admin_ID=$Entra_Group_Admin_ID" >> $env:GITHUB_ENV
            $Entra_Group_Admin_Name = $Entra_Group_Admin_HashTable.Group_Name
            "Entra_Group_Admin_Name=$Entra_Group_Admin_Name" >> $env:GITHUB_ENV

            $Entra_Group_Shared_Service_HashTable = '${{ env.Entra_Group_Shared_Service }}' | ConvertFrom-Json
            $Entra_Group_Shared_Service_ID = $Entra_Group_Shared_Service_HashTable.Group_ID
            "Entra_Group_Shared_Service_ID=$Entra_Group_Shared_Service_ID" >> $env:GITHUB_ENV
            $Entra_Group_Shared_Service_Name = $Entra_Group_Shared_Service_HashTable.Group_Name
            "Entra_Group_Shared_Service_Name=$Entra_Group_Shared_Service_Name" >> $env:GITHUB_ENV

            $Entra_Group_Governance_HashTable = '${{ env.Entra_Group_Governance }}' | ConvertFrom-Json
            $Entra_Group_Governance_ID = $Entra_Group_Governance_HashTable.Group_ID
            "Entra_Group_Governance_ID=$Entra_Group_Governance_ID" >> $env:GITHUB_ENV
            $Entra_Group_Governance_Name = $Entra_Group_Governance_HashTable.Group_Name
            "Entra_Group_Governance_Name=$Entra_Group_Governance_Name" >> $env:GITHUB_ENV
          azPSVersion: "latest"

      # Create resource group for environment resources and get service principal name
      - name: Parse Entra Groups for Bicep
        uses: azure/powershell@v1
        with:
          inlineScript: |
            # parse entra groups
            $Entra_Group_Admin_Json = '${{ env.Entra_Group_Admin }}' -replace '"', "'"
            "Entra_Group_Admin_Json=$Entra_Group_Admin_Json" >> $env:GITHUB_ENV

            $Entra_Group_Shared_Service_Json = '${{ env.Entra_Group_Shared_Service }}' -replace '"', "'"
            "Entra_Group_Shared_Service_Json=$Entra_Group_Shared_Service_Json" >> $env:GITHUB_ENV

            $Entra_Group_Governance_Json = '${{ env.Entra_Group_Governance }}' -replace '"', "'"
            "Entra_Group_Governance_Json=$Entra_Group_Governance_Json" >> $env:GITHUB_ENV

            $Entra_Groups_Data_Publishers_Json = '${{ env.Entra_Groups_Data_Publishers }}' -replace '"', "'"
            "Entra_Groups_Data_Publishers_Json=$Entra_Groups_Data_Publishers_Json" >> $env:GITHUB_ENV

            $Entra_Groups_Data_Producers_Json = '${{ env.Entra_Groups_Data_Producers }}' -replace '"', "'"
            "Entra_Groups_Data_Producers_Json=$Entra_Groups_Data_Producers_Json" >> $env:GITHUB_ENV

            $Entra_Groups_Data_Consumers_Json = '${{ env.Entra_Groups_Data_Consumers }}' -replace '"', "'"
            "Entra_Groups_Data_Consumers_Json=$Entra_Groups_Data_Consumers_Json" >> $env:GITHUB_ENV
          azPSVersion: "latest"

      # Create resource group for envionment resources and get service principal name
      - name: Create Main Resource Group
        if: ${{ env.ServicePrincipalHasOwnerRBACAtSubscription == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tagsHashTable = '${{ env.tags }}' | ConvertFrom-Json -AsHashtable
            New-AzResourceGroup -Name ${{ env.PrimaryRgName }} -Location ${{ env.azureResourceLocation }} -Tag $tagsHashTable -Force
          azPSVersion: "latest"

      # Create resource group for environment resources
      - name: Create VNET, VM Resource Group
        if: ${{ env.DeployWithCustomNetworking == 'True' && env.DeployNewVnet == 'True' }}
        uses: azure/powershell@v1
        id: vnetRG
        with:
          inlineScript: |
            $tagsHashTable = '${{ env.tags }}' | ConvertFrom-Json -AsHashtable
            New-AzResourceGroup -Name ${{ env.VnetForResourcesRgName }} -Location ${{ env.azureResourceLocation }} -Tag $tagsHashTable -Force
            $vnetName = (Get-AzResource -ResourceGroupName ${{ env.VnetForResourcesRgName }} -Name ${{ env.VnetForResourcesName }}).Name
            "vnetName=$vnetName" >> $env:GITHUB_ENV
          azPSVersion: "latest"   

      # Create resource group for environment resources
      - name: Create Logic App Resource Group
        if: ${{ env.DeployLogicApp == 'True' && env.ServicePrincipalHasOwnerRBACAtSubscription == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tagsHashTable = '${{ env.tags }}' | ConvertFrom-Json -AsHashtable
            New-AzResourceGroup -Name ${{ env.LogicAppRgName }} -Location ${{ env.azureResourceLocation }} -Tag $tagsHashTable -Force
          azPSVersion: "latest"   

      # Create resource group for environment resources
      - name: Create ML Resource Group
        if: ${{ env.DeployMLWorkspace == 'True' && env.ServicePrincipalHasOwnerRBACAtSubscription == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tagsHashTable = '${{ env.tags }}' | ConvertFrom-Json -AsHashtable
            New-AzResourceGroup -Name ${{ env.MlRgName }} -Location ${{ env.azureResourceLocation }} -Tag $tagsHashTable -Force
          azPSVersion: "latest" 

      - name: Deploy VNET
        if: ${{ env.DeployWithCustomNetworking == 'True' && env.DeployNewVnet == 'True' && env.vnetName != env.VnetForResourcesName }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.VnetForResourcesRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/vnet.bicep
          # Supply deployment parameter values.
          parameters: vnetName=${{ env.VnetForResourcesName }} vnetAddressSpace=${{ env.NewVnetAddressSpace }} 
          failOnStdErr: false

      - name: Deploy Subnets, NSGs, and Optionally Firewall, Route Table, and Azure Bastion
        if: ${{ env.DeployWithCustomNetworking == 'True' && env.DeployNewVnet == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.VnetForResourcesRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/vnet_resources.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/vnet_resources.json
            vnetName=${{ env.VnetForResourcesName }} 
            vnetAddressSpace=${{ env.NewVnetAddressSpace }} 
            LogicAppSubnetName=${{ env.LogicAppSubnetName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            JumpBoxSubnetName=${{ env.JumpBoxSubnetName }} 
            DeployVMswithBastion=${{ env.DeployVMswithBastion }} 
            bastionName=${{ env.bastionName }} 
            DeployMLWorkspace=${{ env.DeployMLWorkspace }} 
          failOnStdErr: false

      - name: Deploy New Private DNS Zones
        if: ${{ env.DeployWithCustomNetworking == 'True' && env.CreateNewPrivateDNSZones == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.VnetForResourcesRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/private_endpoint_dns_zone_orchestrator.bicep
          # Supply deployment parameter values.
          parameters:
            DeployDataLake=${{ env.DeployDataLake }} 
            DeployLandingStorage=${{ env.DeployLandingStorage }} 
            DeployKeyVault=${{ env.DeployKeyVault }} 
            DeployAzureSQL=${{ env.DeployAzureSQL }} 
            DeployADF=${{ env.DeployADF }} 
            DeploySynapse=${{ env.DeploySynapse }} 
            DeployPurview=${{ env.DeployPurview }} 
            DeployLogicApp=${{ env.DeployLogicApp }} 
            DeployMLWorkspace=${{ env.DeployMLWorkspace }} 
            DeployCognitiveService=${{ env.DeployCognitiveService }} 
            DeployEventHubNamespace=${{ env.DeployEventHubNamespace }}
            DeployDatabricks=${{ env.DeployDatabricks }}
            DeployADFPortalPrivateEndpoint=${{ env.DeployADFPortalPrivateEndpoint }} 
            DeploySynapseWebPrivateEndpoint=${{ env.DeploySynapseWebPrivateEndpoint }} 
            DeployPurviewPrivateEndpoints=${{ env.DeployPurviewPrivateEndpoints }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
          failOnStdErr: false

      - name: Deploy VMs
        if: ${{ env.DeployWithCustomNetworking == 'True' && env.DeployVMswithBastion == 'True'}}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.VnetForResourcesRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/vm.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/vm.json
            virtualMachineName=${{ env.vmName }} 
            numOfVMs=${{ env.vmsPerEnv }} 
            VnetForResourcesRgName=${{ env.VnetForResourcesRgName }}
            VnetForResourcesName=${{ env.VnetForResourcesName }}
            JumpBoxSubnetName=${{ env.JumpBoxSubnetName }}
            adminUsername=${{ secrets.VM_USERNAME }}
            adminPassword=${{ secrets.VM_PASSWORD }}
            AAD_Admin_Group_ID=${{ env.Entra_Group_Admin_ID }}
          failOnStdErr: false

      - name: Deploy Log Analytics
        if: ${{ env.DeployLogAnalytics == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/loganalytics.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/loganalytics.json
            location=${{ env.azureResourceLocation }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Purview
        if: ${{ env.DeployPurview == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/purview.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/purview.json
            location=${{ env.azureResourceLocation }}
            purviewName=${{ env.purviewName }} 
            tags="${{ env.tags_single_quote }}"
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            ServicePrincipalHasOwnerRBACAtSubscription=${{ env.ServicePrincipalHasOwnerRBACAtSubscription }}
            DeployPurviewPrivateEndpoints=${{ env.DeployPurviewPrivateEndpoints }}
            DeployPurviewIngestionPrivateEndpoints=${{ env.DeployPurviewIngestionPrivateEndpoints }}
          failOnStdErr: false

      # Add Admin AAD Group as Purview Root Collection Administrator
      - name: Add Admin AAD Group as Purview Root Collection Administrator
        if: ${{ env.DeployPurview == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az purview account add-root-collection-admin --name "${{ env.purviewName }}" --resource-group "${{ env.PrimaryRgName }}" --object-id "${{ env.Entra_Group_Admin_ID }}"
          azPSVersion: "latest"

      # Bicep Templates Cannot Change AAD Admin
      # So Change AAD Admin Back to Service Principal if Azure SQL Already Exists
      # So No Error is Thrown if Bicep Template Needs to be Rerun
      - name: Set AAD Admin to Service Principal if Azure SQL Already Exists
        if: ${{ env.DeployAzureSQLArtifacts == 'True' || env.DeployAzureSQL == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Install-Module Az.Resources -Repository PSGallery -Force
            $azuresql = Get-AzResource -ResourceGroupName ${{ env.PrimaryRgName }} -Name ${{ env.azureSQLServerName }}
            if ( !([string]::IsNullOrEmpty($azuresql)) ) { 
              az sql server ad-admin update --display-name "${{ env.servicePrincipalName }}" --object-id "${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}" --server "${{ env.azureSQLServerName }}" --resource-group ${{ env.PrimaryRgName }}
            }
          azPSVersion: "latest"

      - name: Deploy Data Lake
        if: ${{ env.DeployDataLake == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/datalake.json
            location=${{ env.azureResourceLocation }}
            storageAccountName=${{ env.dataLakeName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }}      
          failOnStdErr: false

      - name: Deploy Landing Storage Account
        if: ${{ env.DeployLandingStorage == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/landingstorage.json
            location=${{ env.azureResourceLocation }}
            storageAccountName=${{ env.landingStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }}             
          failOnStdErr: false
  
      - name: Deploy Key Vault
        if: ${{ env.DeployKeyVault == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/keyvault.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/keyvault.json
            location=${{ env.azureResourceLocation }}
            keyVaultName=${{ env.keyVaultName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Azure SQL Server and DB
        if: ${{ env.DeployAzureSQL == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/azuresql.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/azuresql.json
            location=${{ env.azureResourceLocation }}
            azureSQLServerName=${{ env.azureSQLServerName }} 
            azureSQLServerDBName=${{ env.azureSQLServerDBName }} 
            AADName="${{ env.servicePrincipalName }}"
            AADID=${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }}  
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            RedeploymentAfterNetworkingIsSetUp=${{ env.RedeploymentAfterNetworkingIsSetUp }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeStart=${{ env.IpRangeStart }}
            IpRangeEnd=${{ env.IpRangeEnd }}
          failOnStdErr: false

      # Combine SQL Files into One for Deployment
      - name: Combine SQL DDL Files into One for Deployment
        if: ${{ env.DeployAzureSQLArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_logicapp_name', '${{ env.logicAppName }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_service_principal_name', '${{ env.servicePrincipalName }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'DeployLogicApp', '${{ env.DeployLogicApp }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_shared_services_group_name', '${{ env.Entra_Group_Shared_Service_Name }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            if("${{ env.DeployMetadataDrivenPipelinesToSynapse }}" -eq "True"){
              (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_datafactory_or_synapse_name', '${{ env.synapseWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            } else {
              (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_datafactory_or_synapse_name', '${{ env.dataFactoryName }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql
            }
            (Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql) -Replace 'insert_synapse_name', '${{ env.synapseWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/stored_procedures/AddManagedIdentitiesAsUsers.sql

            Get-Content ./DeliveryIP_GitHub/azure_sql_artifacts/*/*.sql | Set-Content ./DeliveryIP_GitHub/azure_sql_artifacts/combined.sql
          azPSVersion: "latest"  

      # Refresh OIDC Credentials
      - name: Refresh OIDC Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Deploy Combined SQL DDL File to Azure SQL DB
        if: ${{ env.DeployAzureSQLArtifacts == 'True' }}
        uses: azure/sql-action@v2.2
        with:        
          connection-string: 'Server=${{ env.azureSQLServerName }}.database.windows.net; Initial Catalog=${{ env.azureSQLServerDBName }}; Authentication=Active Directory Default' 
          path: './DeliveryIP_GitHub/azure_sql_artifacts/combined.sql'

      # Set Azure SQL AAD Admin Back to Group with Team Members
      - name: Set Azure SQL AAD Admin to Group with Project Team Members
        if: ${{ env.DeployAzureSQLArtifacts == 'True' || env.DeployAzureSQL == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            az sql server ad-admin update --display-name "${{ env.Entra_Group_Admin_Name }}" --object-id "${{ env.Entra_Group_Admin_ID }}" --server "${{ env.azureSQLServerName }}" --resource-group ${{ env.PrimaryRgName }}
          azPSVersion: "latest"

      - name: Deploy App Insights for Logic App
        if: ${{ env.DeployLogicApp == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.LogicAppRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/appinsights.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/logicapp_appinsights.json
            location=${{ env.azureResourceLocation }}
            appInsightsName=${{ env.logicAppInsightsName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            logAnalyticsRG=${{ env.PrimaryRgName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Logic App Storage Account
        if: ${{ env.DeployLogicApp == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.LogicAppRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/logicapp_storage.json
            location=${{ env.azureResourceLocation }}
            storageAccountName=${{ env.logicAppStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }}      
          failOnStdErr: false

      - name: Deploy App Service Plan for Logic App
        if: ${{ env.DeployLogicApp == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.LogicAppRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/app_service_plan_windows.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/logicapp_app_service_plan.json
            location=${{ env.azureResourceLocation }}
            appServicePlanName=${{ env.logicAppServicePlanName }} 
          failOnStdErr: false

      - name: Deploy Logic App
        if: ${{ env.DeployLogicApp == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.LogicAppRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/logicapp_standard.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/logicapp_standard.json
            location=${{ env.azureResourceLocation }}
            logicAppName=${{ env.logicAppName }} 
            logicAppServicePlanName=${{ env.logicAppServicePlanName }} 
            logicAppAppInsights=${{ env.logicAppInsightsName }} 
            logicAppStorage=${{ env.logicAppStorageName }} 
            azureSQLServerName=${{ env.azureSQLServerName }} 
            azureSQLServerDBName=${{ env.azureSQLServerDBName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            VnetForResourcesRgName=${{ env.VnetForResourcesRgName }}
            VnetForResourcesName=${{ env.VnetForResourcesName }}
            DeployLogicAppInVnet=${{ env.DeployLogicAppInVnet }}
            LogicAppSubnetName=${{ env.LogicAppSubnetName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            storageAccountName=${{ env.logicAppStorageName }} 
            landingStorageName=${{ env.landingStorageName }}
            dataLakeName=${{ env.dataLakeName }} 
            PrimaryRgName=${{ env.PrimaryRgName }}
          failOnStdErr: false

      # Deploy Logic App
      - name: Deploy Logic App Workflows
        if: ${{ env.DeployLogicAppArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |            
            $sqlManagedConn = Get-AzResource -ResourceType "Microsoft.Web/connections" -Name "LogicAppSqlConn" -ResourceGroup "${{ env.LogicAppRgName }}" -ExpandProperties
            $connectionRuntimeURL = $sqlManagedConn.properties.connectionRuntimeURL 
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'resourceGroupName', '${{ env.LogicAppRgName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'AzureResourceLocation', '${{ env.azureResourceLocation }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'mainSynapse', '${{ env.synapseWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'mainSQL', '${{ env.azureSQLServerName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json) -Replace 'ReplaceConnectionRuntimeUrl', "$connectionRuntimeURL" | Set-Content ./DeliveryIP_GitHub/logicapp_standard/connections.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/getSchema/workflow.json) -Replace 'mainSynapse', '${{ env.synapseWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/getSchema/workflow.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/MappingServiceIngestion/workflow.json) -Replace 'mainSQL', '${{ env.azureSQLServerName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/MappingServiceIngestion/workflow.json
            (Get-Content ./DeliveryIP_GitHub/logicapp_standard/la_PackagePayloadConfigurator/workflow.json) -Replace 'mainSQL', '${{ env.azureSQLServerName }}' | Set-Content ./DeliveryIP_GitHub/logicapp_standard/la_PackagePayloadConfigurator/workflow.json
            Compress-Archive -Path ./DeliveryIP_GitHub/logicapp_standard/* -DestinationPath ./DeliveryIP_GitHub/logicapp_standard/logicapp.zip
            
            # deploy without package first so iterative development can be conducted easily
            $setting=@{"WEBSITE_RUN_FROM_PACKAGE"="0"}
            Update-AzFunctionAppSetting -Name '${{ env.logicAppName }}' -ResourceGroupName '${{ env.LogicAppRgName }}' -AppSetting $setting
            az logicapp deployment source config-zip --name ${{ env.logicAppName }} --resource-group ${{ env.LogicAppRgName }} --src ./DeliveryIP_GitHub/logicapp_standard/logicapp.zip
            
            # deploy with package second if logic app is within VNET
            if("${{ env.DeployWithCustomNetworking }}" -eq "True"){
              $setting=@{"WEBSITE_RUN_FROM_PACKAGE"="1"}
              Update-AzFunctionAppSetting -Name '${{ env.logicAppName }}' -ResourceGroupName '${{ env.LogicAppRgName }}' -AppSetting $setting
              az logicapp deployment source config-zip --name ${{ env.logicAppName }} --resource-group ${{ env.LogicAppRgName }} --src ./DeliveryIP_GitHub/logicapp_standard/logicapp.zip
              $setting=@{"WEBSITE_RUN_FROM_PACKAGE"="0"}
              Update-AzFunctionAppSetting -Name '${{ env.logicAppName }}' -ResourceGroupName '${{ env.LogicAppRgName }}' -AppSetting $setting
            }

          azPSVersion: "latest"

      - name: Deploy Cognitive Services
        if: ${{ env.DeployCognitiveService == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/cognitive_service.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/cognitive_service.json
            location=${{ env.azureResourceLocation }}
            cognitiveServiceName=${{ env.cognitiveServiceName }}
            keyVaultName=${{ env.keyVaultName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Event Hub Namespace
        if: ${{ env.DeployEventHubNamespace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/event_hub.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/event_hub.json
            location=${{ env.azureResourceLocation }}
            eventHubNamespaceName=${{ env.eventHubNamespaceName }} 
            landingStorageName=${{ env.landingStorageName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Stream Analytics
        if: ${{ env.DeployStreamAnalytics == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/stream_analytics.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/stream_analytics.json
            location=${{ env.azureResourceLocation }}
            streamAnalyticsName=${{ env.streamAnalyticsName }} 
          failOnStdErr: false

      - name: Deploy Databricks Workspace
        if: ${{ env.DeployDatabricks == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/databricks.bicep
          # Supply deployment parameter values.
          parameters:
            location=${{ env.azureResourceLocation }}
            tags="${{ env.tags_single_quote }}"
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            databricksWorkspaceName=${{ env.databricksWorkspaceName }}  
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployDatabricksInVnet=${{ env.DeployDatabricksInVnet }}
            VnetForDatabricksRgName=${{ env.VnetForDatabricksRgName }}
            VnetForDatabricksName=${{ env.VnetForDatabricksName }}
            DatabricksPrivateSubnetName=${{ env.DatabricksPrivateSubnetName }} 
            DatabricksPublicSubnetName=${{ env.DatabricksPublicSubnetName }}
            VnetForDatabricksTransitSubscriptionId=${{ env.VnetForDatabricksTransitSubscriptionId }}
            VnetForDatabricksTransitRgName=${{ env.VnetForDatabricksTransitRgName }}
            VnetForDatabricksTransitName=${{ env.VnetForDatabricksTransitName }}
            DatabricksTransitPESubnetName=${{ env.DatabricksTransitPESubnetName }}
          failOnStdErr: false

     
      - name: Deploy Synapse Workspace
        if: ${{ env.DeploySynapse == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/synapse.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/synapse.json
            location=${{ env.azureResourceLocation }}
            synapseWorkspaceName=${{ env.synapseWorkspaceName }}
            tags="${{ env.tags_single_quote }}"
            DeploySynapseWithDataExfiltrationProtection=${{ env.DeploySynapseWithDataExfiltrationProtection }}
            dataLakeName=${{ env.dataLakeName }} 
            DeployPurview=${{ env.DeployPurview }} 
            purviewName=${{ env.purviewName }}
            gitAccountName=${{ github.repository_owner }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            DeploySynapseWebPrivateEndpoint=${{ env.DeploySynapseWebPrivateEndpoint }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            RedeploymentAfterNetworkingIsSetUp=${{ env.RedeploymentAfterNetworkingIsSetUp }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeStart=${{ env.IpRangeStart }}
            IpRangeEnd=${{ env.IpRangeEnd }}
            DeployMetadataDrivenPipelinesToSynapse=${{ env.DeployMetadataDrivenPipelinesToSynapse }} 
          failOnStdErr: false

      # Refresh OIDC Credentials
      - name: Refresh OIDC Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Deploy Data Factory
      - name: Deploy ADF Workspace
        if: ${{ env.DeployADF == 'True' }}
        uses: Azure/arm-deploy@v1
        id: dataFactoryDeploy
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/datafactory.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/datafactory.json
            location=${{ env.azureResourceLocation }}
            dataFactoryName=${{ env.dataFactoryName }}
            landingStorageName=${{ env.landingStorageName }} 
            dataLakeName=${{ env.dataLakeName }} 
            keyVaultName=${{ env.keyVaultName }} 
            DeployPurview=${{ env.DeployPurview }} 
            purviewName=${{ env.purviewName }}
            azureSQLServerName=${{ env.azureSQLServerName }}
            azureSQLServerDBName=${{ env.azureSQLServerDBName }}
            synapseWorkspaceName=${{ env.synapseWorkspaceName }}
            gitAccountName=${{ github.repository_owner }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            DeployADFPortalPrivateEndpoint=${{ env.DeployADFPortalPrivateEndpoint }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            DeployCognitiveService=${{ env.DeployCognitiveService }}
            cognitiveServiceName=${{ env.cognitiveServiceName }} 
            DeployMetadataDrivenPipelinesToSynapse=${{ env.DeployMetadataDrivenPipelinesToSynapse }} 
            DeployADFArtifacts=${{ env.DeployADFArtifacts }} 
          failOnStdErr: false

      # Log into Azure
      - name: Refresh OIDC Credentials
        if: ${{ env.DeployADF == 'True' }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Deploy Synapse Pools. Currently Only Spark Pools Are Deployed
      - name: Deploy Synapse Spark Pools
        if: ${{ env.DeploySynapseSparkPools == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/synapse_pools.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/synapse_pools.json
            location=${{ env.azureResourceLocation }}
            synapseWorkspaceName=${{ env.synapseWorkspaceName }}
          failOnStdErr: false

      - name: Create Data Factory Datasets
        if: ${{ env.DeployADFArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $datasetFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/integration_datasets/*"
            $files = Get-ChildItem -Path "$datasetFolder" -Include *.json
            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $datasetFolder + $name
              Set-AzDataFactoryV2Dataset -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -Name "$name_without_extension" -DefinitionFile "$full_path" -Force
            }
          azPSVersion: "latest"

      # Create Synapse Linked Services to Data Lake, Landing Storage, Azure SQL, and Key Vault
      - name: Create Synapse Linked Services
        if: ${{ env.DeploySynapseArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tokenOutput = Get-AzAccessToken -Resource "https://dev.azuresynapse.net"
            $token = $tokenOutput.token
            $auth = 'Bearer ' + $token
            $headers = @{
              Authorization = "$auth"
            }

            # data lake
            $ls_body = (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/adls.json) -Replace 'storageAccountName', '${{ env.dataLakeName }}' | Out-String
            $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_DataLake?api-version=2019-06-01-preview"
            Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body
            
            # landing storage
            $ls_body = (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/adls.json) -Replace 'storageAccountName', '${{ env.landingStorageName }}' | Out-String
            $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_LandingStorage?api-version=2019-06-01-preview"
            Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body
            
            # azure sql
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/azuresql.json) -Replace 'azureSQLServerName', '${{ env.azureSQLServerName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/azuresql.json
            $ls_body = (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/azuresql.json) -Replace 'azureSQLServerDBName', '${{ env.azureSQLServerDBName }}' | Out-String
            $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_SQL_MetadataControl?api-version=2019-06-01-preview"
            Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body
            
            # key vault
            $ls_body = (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/keyvault.json) -Replace 'keyVaultName', '${{ env.keyVaultName }}' | Out-String
            $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_KeyVault?api-version=2019-06-01-preview"
            Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body
          
            # cognitive service
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json) -Replace 'cognitiveServiceName', '${{ env.cognitiveServiceName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json
            $ls_body = (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/cognitiveservice.json) -Replace 'azureLocation', '${{ env.azureResourceLocation }}' | Out-String
            $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_CognitiveService?api-version=2019-06-01-preview"
            Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body

            if ("${{ env.DeployMLWorkspace }}" -eq "True") { 
              # create ml workspace linked service
              (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json) -Replace 'resourceGroupNameInput', '${{ env.MlRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json
              (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json
              (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json) -Replace 'MachineLearningWorkspaceName', '${{ env.mlWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json

              $ls_body = Get-Content "./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/machineLearningWorkspace.json" | Out-String

              $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/linkedServices/LS_MachineLearningWorkspace?api-version=2019-06-01-preview"
              
              Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $ls_body
            }
          azPSVersion: "latest"

      - name: Create Synapse Datasets and Notebooks
        if: ${{ env.DeploySynapseArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $notebookFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/notebooks/"
            $files = Get-ChildItem -Path "$notebookFolder" -Exclude "NotDeployed"

            foreach($file in $files) {
              $filename = $file.name
              $full_path = $notebookFolder + $filename
              
              $folder_filename = $filename.split('&')
              $synapsefolder = $folder_filename[0]
              $synapseNbName = $folder_filename[1].replace('.ipynb','')
              
              Set-AzSynapseNotebook -WorkspaceName ${{ env.synapseWorkspaceName }} -Name "$synapseNbName" -DefinitionFile "$full_path" -FolderPath "$synapsefolder" -SparkPoolName "defaultSpark33" -ExecutorCount 1 -ExecutorSize "Medium"
            }

            $tokenOutput = Get-AzAccessToken -Resource "https://dev.azuresynapse.net"
            $token = $tokenOutput.token
            $auth = 'Bearer ' + $token
            $headers = @{
              Authorization = "$auth"
            }

            $datasetFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/integration_datasets/*"
            $files = Get-ChildItem -Path "$datasetFolder" -Include *.json

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $datasetFolder + $name
              $dataset_body = (Get-Content "$full_path") | Out-String
              $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/datasets/"+$name_without_extension+"?api-version=2020-12-01"
              Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $dataset_body
            }
          azPSVersion: "latest"

      - name: Create Data Factory Pipelines, Dataflows, and Triggers
        if: ${{ env.DeployMetadataDrivenPipelinesToSynapse == 'False' && env.DeployADFArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $datasetFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/integration_datasets/SourceToLanding/*"
            $files = Get-ChildItem -Path "$datasetFolder" -Include *.json

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $datasetFolder + $name
              Set-AzDataFactoryV2Dataset -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -Name "$name_without_extension" -DefinitionFile "$full_path" -Force
            }
            
            $dataflowFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/dataflows/"
            $files = Get-ChildItem -Path "$dataflowFolder" -Exclude "NotDeployed"

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $dataflowFolder + $name
              Set-AzDataFactoryV2DataFlow -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -Name $name_without_extension -DefinitionFile "$full_path" -Force
            }

            $pipelineFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/pipelines/"
            $files = Get-ChildItem -Path "$pipelineFolder" -Exclude "NotDeployed", "*_Synapse.json" | Sort-Object -Property Name -Descending

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('_ADF.json','').replace('.json','')
              $full_path = $pipelineFolder + $name
              Set-AzDataFactoryV2Pipeline -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -Name $name_without_extension -DefinitionFile "$full_path" -Force
            }
            
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'landingStorageName', '${{ env.landingStorageName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            Set-AzDataFactoryV2Trigger -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -Name "TR_blobCreatedEvent" `
            -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json" -Force
            # start trigger
            Start-AzDataFactoryV2Trigger -ResourceGroupName "${{ env.PrimaryRgName }}" -DataFactoryName "${{ env.dataFactoryName }}" -TriggerName "TR_blobCreatedEvent" -Force
          azPSVersion: "latest"   

      - name: Deploy ML Workspace Storage Account
        if: ${{ env.DeployMLWorkspace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/mlstorage.json
            location=${{ env.azureResourceLocation }}
            storageAccountName=${{ env.mlStorageName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }}
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }}      
          failOnStdErr: false
            
      - name: Deploy ML Workspace App Insights
        if: ${{ env.DeployMLWorkspace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/appinsights.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/mlappinsights.json
            location=${{ env.azureResourceLocation }}
            appInsightsName=${{ env.mlAppInsightsName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            logAnalyticsRG=${{ env.PrimaryRgName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Container Registry for ML Workspace
        if: ${{ env.DeployMLWorkspace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/container_registry.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/aml_container_registry.json
            location=${{ env.azureResourceLocation }}
            containerRegistryName=${{ env.mlContainerRegistryName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Key Vault for ML Workspace
        if: ${{ env.DeployMLWorkspace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/keyvault.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/mlWorkspaceKeyVault.json
            location=${{ env.azureResourceLocation }}
            keyVaultName=${{ env.mlWorkspaceKeyVaultName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy ML Workspace
        if: ${{ env.DeployMLWorkspace == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/mlworkspace.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/mlworkspace.json
            location=${{ env.azureResourceLocation }}
            mlWorkspaceName=${{ env.mlWorkspaceName }} 
            mlStorageAccountName=${{ env.mlStorageName }} 
            appInsightsName=${{ env.mlAppInsightsName }} 
            containerRegistryName=${{ env.mlContainerRegistryName }} 
            keyVaultName=${{ env.mlWorkspaceKeyVaultName }} 
            dataLakeName=${{ env.dataLakeName }} 
            PrimaryRgName=${{ env.PrimaryRgName }}
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            RedeploymentAfterNetworkingIsSetUp=${{ env.RedeploymentAfterNetworkingIsSetUp }}
            DeployMLWorkspaceInManagedVnet=${{ env.DeployMLWorkspaceInManagedVnet }}
          failOnStdErr: false

      - name: Deploy ML Compute for ML Workspace and Optionally RBAC for Compute
        if: ${{ env.DeployMLCompute == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.MlRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/ml_compute.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/ml_compute.json
            location=${{ env.azureResourceLocation }}
            mlWorkspaceName=${{ env.mlWorkspaceName }} 
            dataLakeName=${{ env.dataLakeName }} 
            PrimaryRgName=${{ env.PrimaryRgName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }}
            DeployMLWorkspaceInCustomerVnet=${{ env.DeployMLWorkspaceInCustomerVnet }}
            VnetForResourcesRgName=${{ env.VnetForResourcesRgName }} 
            VnetForResourcesName=${{ env.VnetForResourcesName }} 
            MLComputeSubnetName=${{ env.MLComputeSubnetName }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            Assign_RBAC_On_Deployment=${{ env.Assign_RBAC_On_Deployment }} 
          failOnStdErr: false

      # Refresh OIDC Credentials
      - name: Refresh OIDC Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Enable Azure Container Registry for ML Workspace Behind Virtual Network
        if: ${{ env.DeployMLWorkspace == 'True' && env.CreatePrivateEndpoints == 'True' && env.DeployWithCustomNetworking == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            az extension add -n ml
            az ml workspace update --name ${{ env.mlWorkspaceName }} --resource-group ${{ env.MlRgName }} --image-build-compute image-build-compute-cluster
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to Data Lake Storage Account - DFS endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json) -Replace 'storageAccountName', '${{ env.dataLakeName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_DataLake_DFS -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_1.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to Data Lake Storage Account - Blob endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json) -Replace 'storageAccountName', '${{ env.dataLakeName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_DataLake_Blob -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_1.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to Landing Storage - DFS endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json) -Replace 'storageAccountName', '${{ env.landingStorageName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_LandingStorage_DFS -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_dfs_2.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to Landing Storage - Blob endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json) -Replace 'storageAccountName', '${{ env.landingStorageName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_LandingStorage_Blob -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_2.json"
          azPSVersion: "latest"


      - name: Create Synapse Managed Private Endpoint to Key Vault
        if: ${{ env.DeploySynapse == 'True' && env.DeployKeyVault == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json) -Replace 'keyVaultName', '${{ env.keyVaultName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_KeyVault -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/keyvault.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to Azure SQL
        if: ${{ env.DeploySynapse == 'True' && env.DeployAzureSQL == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json) -Replace 'azureSQLServerName', '${{ env.azureSQLServerName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_AzureSQL -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/azuresql.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoints to Purview
        if: ${{ env.DeploySynapse == 'True' && env.DeployPurview == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json) -Replace 'purviewName', '${{ env.purviewName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_Purview1 -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/purview.json"
          
            $purview = Get-AzResource -Name ${{ env.purviewName }} -ResourceGroupName ${{ env.PrimaryRgName }} -ResourceType Microsoft.Purview/accounts -ExpandProperties
            $purviewStorageResourceId = $purview.Properties.managedResources.storageAccount
            $purviewStorageName = $purviewStorageResourceId.split('/')[-1]  
            $purviewManagedRgName = $purview.Properties.managedResourceGroupName

            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue.json) -Replace 'resourceGroupName', "$purviewManagedRgName" | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json) -Replace 'storageAccountName', "$purviewStorageName" | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_PurviewStorage_Queue -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/queue_purviewStorage.json"

            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob.json) -Replace 'resourceGroupName', "$purviewManagedRgName" | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json) -Replace 'storageAccountName', "$purviewStorageName" | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_PurviewStorage_Blob -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/adls_blob_purviewStorage.json"
          azPSVersion: "latest"

      - name: Create Synapse Managed Private Endpoint to ML Workspace
        if: ${{ env.DeploySynapse == 'True' && env.DeployMLWorkspace == 'True' && env.DeployWithCustomNetworking == 'True' && env.CreatePrivateEndpoints == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json) -Replace 'resourceGroupName', '${{ env.MlRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json) -Replace 'MachineLearningWorkspaceName', '${{ env.mlWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json
            New-AzSynapseManagedPrivateEndpoint -WorkspaceName ${{ env.synapseWorkspaceName }} -Name MPE_MachineLearningWorkspace -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/managed_private_endpoints/machineLearningWorkspace.json"
          azPSVersion: "latest"

      # feature flag for Synapse only (No ADF Deployment). Adding Metadata Control Pipelines and Blob Created Trigger
      - name: Create Synapse Metadata Control Pipelines, Dataflow, and Blob Created Trigger
        if: ${{ env.DeployMetadataDrivenPipelinesToSynapse == 'True' && env.DeploySynapseArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tokenOutput = Get-AzAccessToken -Resource "https://dev.azuresynapse.net"
            $token = $tokenOutput.token
            $auth = 'Bearer ' + $token
            $headers = @{
              Authorization = "$auth"
            }

            # oracle
            Set-AzSynapseLinkedService -WorkspaceName ${{ env.synapseWorkspaceName }} -Name 'LS_Oracle' -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/linked_services/oracle.json"

            $datasetFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/integration_datasets/SourceToLanding/*"
            $files = Get-ChildItem -Path "$datasetFolder" -Include *.json

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $datasetFolder + $name
              $dataset_body = (Get-Content "$full_path") | Out-String
              $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/datasets/"+$name_without_extension+"?api-version=2020-12-01"
              Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $dataset_body
            }

            $dataflowFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/dataflows/"
            $files = Get-ChildItem -Path "$dataflowFolder" -Exclude "NotDeployed"

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('.json','')
              $full_path = $dataflowFolder + $name
              Set-AzSynapseDataFlow -WorkspaceName ${{ env.synapseWorkspaceName }} -Name $name_without_extension -DefinitionFile "$full_path"
            }

            $pipelineFolder = "./DeliveryIP_GitHub/synapse_adf_artifacts/pipelines/"
            $files = Get-ChildItem -Path "$pipelineFolder" -Exclude "NotDeployed", "*_ADF.json" | Sort-Object -Property Name -Descending

            foreach($file in $files) {
              $name = $file.name
              $name_without_extension = $name.replace('_Synapse.json','').replace('.json','')
              $full_path = $pipelineFolder + $name
              $pipeline_body = (Get-Content "$full_path") | Out-String
              $api_url = "https://${{ env.synapseWorkspaceName }}.dev.azuresynapse.net/pipelines/"+$name_without_extension+"?api-version=2020-12-01"
              Invoke-RestMethod -Method 'PUT' -Uri $api_url -Headers $headers -Body $pipeline_body
            }

            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'resourceGroupName', '${{ env.PrimaryRgName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'subID', '${{ secrets.SUBSCRIPTION_ID }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json) -Replace 'landingStorageName', '${{ env.landingStorageName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json
            Set-AzSynapseTrigger  -WorkspaceName ${{ env.synapseWorkspaceName }} -Name 'TR_blobCreatedEvent' -DefinitionFile "./DeliveryIP_GitHub/synapse_adf_artifacts/triggers/TR_blobCreatedEvent.json"
            # start trigger
            Start-AzSynapseTrigger -WorkspaceName ${{ env.synapseWorkspaceName }} -Name TR_blobCreatedEvent -AsJob
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Data Lake Storage Account - Blob Endpoint
        if: ${{ env.DeployADF == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.dataLakeName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_DataLake_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Data Lake Storage Account - DFS Endpoint
        if: ${{ env.DeployADF == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.dataLakeName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_DataLake_DFS') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Landing Storage Account - Blob Endpoint
        if: ${{ env.DeployADF == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.landingStorageName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_LandingStorage_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Landing Storage Account - DFS Endpoint
        if: ${{ env.DeployADF == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.landingStorageName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_LandingStorage_DFS') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Azure SQL
        if: ${{ env.DeployADF == 'True' && env.DeployAzureSQL == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Sql/servers/${{ env.azureSQLServerName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_AzureSQL') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Key Vault
        if: ${{ env.DeployADF == 'True' && env.DeployKeyVault == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.KeyVault/vaults/${{ env.keyVaultName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_KeyVault') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoints to Purview
        if: ${{ env.DeployADF == 'True' && env.DeployPurview == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Purview/accounts/${{ env.purviewName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_Purview') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.dataFactoryName }}"
            }

            if ("${{ env.ServicePrincipalHasOwnerRBACAtSubscription }}" -eq "True") { 
              $purview = Get-AzResource -Name ${{ env.purviewName }} -ResourceGroupName ${{ env.PrimaryRgName }} -ResourceType Microsoft.Purview/accounts -ExpandProperties
              $purviewStorageResourceId = $purview.Properties.managedResources.storageAccount

              $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "$purviewStorageResourceId"
              $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_PurviewStorage_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
              if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
                Write-Output "No Private Endpoint to Approve"
              } else {
                $privateEndpointId = $privateEndpoint.Id
                Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.dataFactoryName }}"
              }

              $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "$purviewStorageResourceId"
              $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_PurviewStorage_Queue') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
              if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
                Write-Output "No Private Endpoint to Approve"
              } else {
                $privateEndpointId = $privateEndpoint.Id
                Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.dataFactoryName }}"
              }
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Cognitive Service
        if: ${{ env.DeployADF == 'True' && env.DeployCognitiveService == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.CognitiveServices/accounts/${{ env.cognitiveServiceName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_CognitiveService') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.dataFactoryName }}"
            }
          azPSVersion: "latest"

      - name: Approve Data Factory Private Endpoint to Synapse
        if: ${{ env.DeployADF == 'True' && env.DeploySynapse == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Synapse/workspaces/${{ env.synapseWorkspaceName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.dataFactoryName }}.MPE_Synapse') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Data Lake Storage Account - DFS Endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.dataLakeName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_DataLake_DFS') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Data Lake Storage Account - Blob Endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployDataLake == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.dataLakeName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_DataLake_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Landing Storage Account - DFS Endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.landingStorageName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_LandingStorage_DFS') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Landing Storage Account - Blob Endpoint
        if: ${{ env.DeploySynapse == 'True' && env.DeployLandingStorage == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Storage/storageAccounts/${{ env.landingStorageName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_LandingStorage_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Azure SQL
        if: ${{ env.DeploySynapse == 'True' && env.DeployAzureSQL == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Sql/servers/${{ env.azureSQLServerName }}" 
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_AzureSQL') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to Key Vault
        if: ${{ env.DeploySynapse == 'True' && env.DeployKeyVault == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.KeyVault/vaults/${{ env.keyVaultName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_KeyVault') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoints to Purview
        if: ${{ env.DeploySynapse == 'True' && env.DeployPurview == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.PrimaryRgName }}/providers/Microsoft.Purview/accounts/${{ env.purviewName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_Purview') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.synapseWorkspaceName }}"
            }

            if ("${{ env.ServicePrincipalHasOwnerRBACAtSubscription }}" -eq "True") { 
              $purview = Get-AzResource -Name ${{ env.purviewName }} -ResourceGroupName ${{ env.PrimaryRgName }} -ResourceType Microsoft.Purview/accounts -ExpandProperties
              $purviewStorageResourceId = $purview.Properties.managedResources.storageAccount

              $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "$purviewStorageResourceId"
              $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_PurviewStorage_Blob') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
              if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
                Write-Output "No Private Endpoint to Approve"
              } else {
                $privateEndpointId = $privateEndpoint.Id
                Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.synapseWorkspaceName }}"
              }

              $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "$purviewStorageResourceId"
              $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_PurviewStorage_Queue') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
              if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
                Write-Output "No Private Endpoint to Approve"
              } else {
                $privateEndpointId = $privateEndpoint.Id
                Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.synapseWorkspaceName }}"
              }
            }
          azPSVersion: "latest"

      - name: Approve Synapse Private Endpoint to ML Workspace
        if: ${{ env.DeploySynapse == 'True' && env.DeployMLWorkspace == 'True' && env.DeployWithCustomNetworking == 'True' && env.CreatePrivateEndpoints == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $endpointList = Get-AzPrivateEndpointConnection -PrivateLinkResourceId "/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.MlRgName }}/providers/Microsoft.MachineLearningServices/workspaces/${{ env.mlWorkspaceName }}"
            $privateEndpoint = $endpointList | Where-Object { $_.PrivateEndpoint.Id.EndsWith('${{ env.synapseWorkspaceName }}.MPE_MachineLearningWorkspace') -and $_.PrivateLinkServiceConnectionState.Status -EQ 'Pending' }
            if ( [string]::IsNullOrEmpty($privateEndpoint) ) { 
              Write-Output "No Private Endpoint to Approve"
            } else {
              $privateEndpointId = $privateEndpoint.Id
              Approve-AzPrivateEndpointConnection -ResourceId $privateEndpointId -Description "Approve for connection to ${{ env.synapseWorkspaceName }}"
            }
          azPSVersion: "latest"

      - name: Deploy RBAC
        if: ${{ env.Assign_RBAC_On_Deployment == 'True' }}
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.PrimaryRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/rbac_dsdeployment_orchestrator.bicep
          # Supply deployment parameter values.
          parameters:
            env=${{ inputs.envFolderPath }}
            Service_Principal_Infra_Object_ID=${{ env.servicePrincipalObjectId }}
            Assign_RBAC_for_CICD_Service_Principal=${{ env.Assign_RBAC_for_CICD_Service_Principal }}
            Service_Principal_CICD_Object_ID=${{ env.Service_Principal_CICD_Object_ID }}
            Entra_Group_Admin_Group_ID=${{ env.Entra_Group_Admin_ID }}
            Entra_Group_Shared_Service_Group_ID=${{ env.Entra_Group_Shared_Service_ID }}
            Assign_RBAC_for_Governance=${{ env.Assign_RBAC_for_Governance }}
            Entra_Group_Governance_Group_ID=${{ env.Entra_Group_Governance_ID }}
            Assign_RBAC_for_Publishers=${{ env.Assign_RBAC_for_Publishers }}
            Entra_Groups_Data_Publishers=${{ env.Entra_Groups_Data_Publishers_Json }}
            Assign_RBAC_for_Producers=${{ env.Assign_RBAC_for_Producers }}
            Entra_Groups_Data_Producers=${{ env.Entra_Groups_Data_Producers_Json }}
            Assign_RBAC_for_Consumers=${{ env.Assign_RBAC_for_Consumers }}
            Entra_Groups_Data_Consumers=${{ env.Entra_Groups_Data_Consumers_Json }}
            PrimaryRgName=${{ env.PrimaryRgName }}
            DeployDataLake=${{ env.DeployDataLake }}
            dataLakeName=${{ env.dataLakeName }}
            DeployLandingStorage=${{ env.DeployLandingStorage }}
            landingStorageName=${{ env.landingStorageName }}
            DeployPurview=${{ env.DeployPurview }}
            purviewName=${{ env.purviewName }}
            DeployKeyVault=${{ env.DeployKeyVault }}
            keyVaultName=${{ env.keyVaultName }}
            DeployADF=${{ env.DeployADF }}
            dataFactoryName=${{ env.dataFactoryName }}
            DeploySynapse=${{ env.DeploySynapse }}
            synapseWorkspaceName=${{ env.synapseWorkspaceName }}
            DeployCognitiveService=${{ env.DeployCognitiveService }}
            cognitiveServiceName=${{ env.cognitiveServiceName }}
            DeployEventHubNamespace=${{ env.DeployEventHubNamespace }}
            eventHubNamespaceName=${{ env.eventHubNamespaceName }}
            DeployStreamAnalytics=${{ env.DeployStreamAnalytics }}
            streamAnalyticsName=${{ env.streamAnalyticsName }}
            DeployLogicApp=${{ env.DeployLogicApp }}
            logicAppRG=${{ env.LogicAppRgName }}
            logicAppName=${{ env.logicAppName }}
            DeployMLWorkspace=${{ env.DeployMLWorkspace }}
            MlRgName=${{ env.MlRgName }}
            mlWorkspaceName=${{ env.mlWorkspaceName }} 
          failOnStdErr: false

      # Assign ACLs for Data Publishers on Folders in Landing Zone
      - name: Assign ACLs for Data Publishers on Folders in Landing Zone
        if: ${{ env.Assign_RBAC_On_Deployment == 'True' && env.Assign_RBAC_for_Publishers == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $ctx = New-AzStorageContext -StorageAccountName '${{ env.landingStorageName }}' -UseConnectedAccount
            $filesystemName = "landing"
            
            $Entra_Groups_Data_Publishers_HashTable = '${{ env.Entra_Groups_Data_Publishers }}' | ConvertFrom-Json
            foreach ( $publisher in $Entra_Groups_Data_Publishers_HashTable ) {
                $EntityID = $publisher.Group_ID
                $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName).ACL
                $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission --x -InputObject $acl -DefaultScope
                Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Acl $acl
                $all_storage_paths = $publisher.Storage_Paths_Write_Access
              foreach ( $path in $all_storage_paths ) {
                $exists = az storage fs directory exists --account-name ${{ env.landingStorageName }} --auth-mode login --file-system $filesystemName --name $path | ConvertFrom-Json
                if ($exists.exists -ne $true) {
                  az storage fs directory create --account-name ${{ env.landingStorageName }} --auth-mode login --file-system $filesystemName --name $path
                }
                $all_directories = "$path" -split "/" -ne ""
                $path_update = ""
                foreach ( $directory in $all_directories ) {
                  $path_update = $path_update + $directory + '/'
                  $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path_update).ACL
                  $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission --x -InputObject $acl -DefaultScope
                  Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path_update -Acl $acl                
                }
                $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path).ACL
                $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission rwx -InputObject $acl -DefaultScope
                Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path -Acl $acl

                $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path).ACL
                $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission rwx -InputObject $acl
                Update-AzDataLakeGen2AclRecursive -Context $ctx -FileSystem $filesystemName -Path $path -Acl $acl
              }
            }
          azPSVersion: "latest"  

      # Assign ACLs for Data Producers on Folders in Curated Zone
      - name: Assign ACLs for Data Producers on Folders in Curated Zone
        if: ${{ env.Assign_RBAC_On_Deployment == 'True' && env.Assign_RBAC_for_Producers == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $ctx = New-AzStorageContext -StorageAccountName '${{ env.dataLakeName }}' -UseConnectedAccount
            $filesystemName = "curated"
            
            $Entra_Groups_Data_Producers_HashTable = '${{ env.Entra_Groups_Data_Producers }}' | ConvertFrom-Json
            foreach ( $producer in $Entra_Groups_Data_Producers_HashTable ) {
                $EntityID = $producer.Group_ID
                $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName).ACL
                $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission --x -InputObject $acl -DefaultScope
                Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Acl $acl
                $all_storage_paths = $producer.Storage_Paths_Write_Access
              foreach ( $path in $all_storage_paths ) {
                $exists = az storage fs directory exists --account-name ${{ env.dataLakeName }} --auth-mode login --file-system $filesystemName --name $path | ConvertFrom-Json
                if ($exists.exists -ne $true) {
                  az storage fs directory create --account-name ${{ env.dataLakeName }} --auth-mode login --file-system $filesystemName --name $path
                }
                $all_directories = "$path" -split "/" -ne ""
                $path_update = ""
                foreach ( $directory in $all_directories ) {
                  $path_update = $path_update + $directory + '/'
                  $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path_update).ACL
                  $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission --x -InputObject $acl -DefaultScope
                  Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path_update -Acl $acl                
                }
                $acl = (Get-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path).ACL
                $acl = Set-AzDataLakeGen2ItemAclObject -AccessControlType group -EntityID $EntityID -Permission rwx -InputObject $acl -DefaultScope
                Update-AzDataLakeGen2Item -Context $ctx -FileSystem $filesystemName -Path $path -Acl $acl
                Update-AzDataLakeGen2AclRecursive -Context $ctx -FileSystem $filesystemName -Path $path -Acl $acl
              }
            }
          azPSVersion: "latest"  

      - name: Grant AAD Groups and ADF Rights to Synapse
        if: ${{ env.DeploySynapse == 'True' || env.DeploySynapseArtifacts == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            # give ADF Contributor and Credential User rights to Synapse
            if ("${{ env.DeployMetadataDrivenPipelinesToSynapse }}" -eq "False" -and "${{ env.DeployADF }}" -eq "True") { 
              $dataFactoryDetails = Get-AzDataFactoryV2 -name "${{ env.dataFactoryName }}" -ResourceGroupName "${{ env.PrimaryRgName }}"
              $adfSpId = $dataFactoryDetails.Identity.PrincipalId.Guid
              az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse Contributor" --assignee $adfSpId
              az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse Credential User" --assignee $adfSpId
            }
            # give AAD group admin rights to Synapse
            # all other Synapse RBAC need to go before AAD Group Synapse RBAC
            az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse Administrator" --assignee ${{ env.Entra_Group_Admin_ID }}
            az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse SQL Administrator" --assignee ${{ env.Entra_Group_Shared_Service_ID }}
            az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse Contributor" --assignee ${{ env.Entra_Group_Shared_Service_ID }}
            az synapse role assignment create --workspace-name ${{ env.synapseWorkspaceName }} --role "Synapse Credential User" --assignee ${{ env.Entra_Group_Shared_Service_ID }}
            Set-AzSynapseSqlActiveDirectoryAdministrator -WorkspaceName ${{ env.synapseWorkspaceName }} -ObjectId ${{  env.Entra_Group_Admin_ID }}
          azPSVersion: "latest"

      # Combine SQL Files into One for Deployment
      - name: Create SQL File in Synapse for Serverless SQL Pool and SP's for Logic App
        if: ${{ env.DeploySynapseSqlPools == 'True' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql) -Replace 'storageAccountName', '${{ env.dataLakeName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql) -Replace 'insert_logicapp_name', '${{ env.logicAppName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql) -Replace 'insert_synapse_name', '${{ env.synapseWorkspaceName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql
            (Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql) -Replace 'insert_service_principal_name', '${{ env.servicePrincipalName }}' | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/stored_procedures/z_addmanagedidentities.sql
            Get-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/*/*.sql | Set-Content ./DeliveryIP_GitHub/synapse_adf_artifacts/serverless/RunForLogicApp.sql
            $full_path = './DeliveryIP_GitHub/synapse_adf_artifacts/serverless/RunForLogicApp.sql'
            Set-AzSynapseSqlScript -WorkspaceName ${{ env.synapseWorkspaceName }} -DefinitionFile "$full_path" -SqlDatabaseName master -SqlPoolName "Built-in"
          azPSVersion: "latest"  

      - name: Remove Public Network Access to Resources That Required it During Deployment
        if: ${{ env.DeployResourcesWithPublicAccess == 'False' }}
        uses: azure/powershell@v1
        with:
          inlineScript: |
            if ("${{ env.DeployWithCustomNetworking }}" -eq "True" -And "${{ env.AllowAccessToIpRange }}" -eq "True") { 
              Write-Output "Access is Set to Be Filtered to Specific IPs"
            } else {
              if ("${{ env.DeploySynapse }}" -eq "True") { 
                Update-AzSynapseWorkspace -Name ${{ env.synapseWorkspaceName }} -EnablePublicNetworkAccess $False
              }
              if ("${{ env.DeployAzureSQL }}" -eq "True") {
                az sql server update --resource-group ${{ env.PrimaryRgName }} --name ${{ env.azureSQLServerName }} --enable-public-network false
              }
              if ("${{ env.DeployLogicApp }}" -eq "True") {  
                Set-AzStorageAccount -ResourceGroupName "${{ env.LogicAppRgName }}" -Name "${{ env.logicAppStorageName }}" -PublicNetworkAccess "Disabled" -Force
              }
            }

            if ("${{ env.DeployADF }}" -eq "True") { 
              Update-AzDataFactoryV2 -ResourceGroupName ${{ env.PrimaryRgName }} -Name ${{ env.dataFactoryName }} -PublicNetworkAccess "Disabled"
            }
          
            if ("${{ env.DeployMLWorkspace }}" -eq "True") { 
              az extension add -n ml
              az ml workspace update --resource-group ${{ env.MlRgName }} --name ${{ env.mlWorkspaceName }} --public-network-access "Disabled"
            }
          azPSVersion: "latest"

  deploy-data-science-toolkit-infra:
    needs: [create-env-azure-resources]
    if: ${{ needs.create-env-azure-resources.outputs.DeployDataScienceToolkit == 'True' }}
    uses: ./.github/workflows/data_science_toolkit_infra.yml
    with:
      environment: ${{ inputs.environment }}
      envFolderPath: ${{ inputs.envFolderPath }}
    secrets:
      TENANT_ID: ${{ secrets.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
      DNS_ZONE_SUBSCRIPTION_ID: ${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}

  deploy-data-science-api-cicd:
    needs: [create-env-azure-resources, deploy-data-science-toolkit-infra]
    if: ${{ needs.create-env-azure-resources.outputs.DeployDataScienceToolkit == 'True' }}
    uses: ./.github/workflows/data_science_api_cicd.yml
    with:
      environment: ${{ inputs.environment }}
      envFolderPath: ${{ inputs.envFolderPath }}
    secrets:
      TENANT_ID: ${{ secrets.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}

  deploy-data-science-portal-cicd:
    needs: [deploy-data-science-api-cicd, create-env-azure-resources, deploy-data-science-toolkit-infra]
    if: ${{ needs.create-env-azure-resources.outputs.DeployDataScienceToolkit == 'True' }}
    uses: ./.github/workflows/data_science_portal_cicd.yml
    with:
      environment: ${{ inputs.environment }}
      envFolderPath: ${{ inputs.envFolderPath }}
    secrets:
      TENANT_ID: ${{ secrets.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}